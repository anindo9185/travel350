"""
Table 'city' aliased as GQLName: 'City'
"""
type City {
  created_at: DateTime
  description: String
  hotel: [Hotel] @materializer(query: "getHotelUsingHotel_city_id_fkey")
  id: ID!
  name: String
  places: [Places] @materializer(query: "getPlacesUsingPlaces_city_id_fkey")
}

"""
Table 'comment' aliased as GQLName: 'Comment'
"""
type Comment {
  created_at: DateTime
  id: ID!
  post: Post @materializer(query: "getPostUsingComment_post_id_fkey")
  post_id: ID
  text: String
  user_id: ID
  usertable: Usertable
    @materializer(query: "getUsertableUsingComment_user_id_fkey")
}

"""
Table 'hotel' aliased as GQLName: 'Hotel'
"""
type Hotel {
  city: City @materializer(query: "getCityUsingHotel_city_id_fkey")
  city_id: ID
  created_at: DateTime
  description: String
  id: ID!
  name: String
}

"""
Table 'places' aliased as GQLName: 'Places'
"""
type Places {
  city: City @materializer(query: "getCityUsingPlaces_city_id_fkey")
  city_id: ID
  created_at: DateTime
  description: String
  id: ID!
  name: String
  post: [Post] @materializer(query: "getPostUsingPost_place_id_fkey")
}

"""
Table 'post' aliased as GQLName: 'Post'
Column: 'image'
  DB Type '_json' is not supported. Column omitted
"""
type Post {
  comment: [Comment] @materializer(query: "getCommentUsingComment_post_id_fkey")
  created_at: DateTime
  description: String
  end_date: Date
  id: ID!
  place_id: ID
  places: Places @materializer(query: "getPlacesUsingPost_place_id_fkey")
  start_date: Date
  title: String
  user_id: ID
  usertable: Usertable
    @materializer(query: "getUsertableUsingPost_user_id_fkey")
  vote: [Vote] @materializer(query: "getVoteUsingVote_post_id_fkey")
}

"""
Table 'usertable' aliased as GQLName: 'Usertable'
"""
type Usertable {
  comment: [Comment] @materializer(query: "getCommentUsingComment_user_id_fkey")
  created_at: DateTime
  email: String
  id: ID!
  name: String
  password: String
  post: [Post] @materializer(query: "getPostUsingPost_user_id_fkey")
  vote: [Vote] @materializer(query: "getVoteUsingVote_user_id_fkey")
}

"""
Table 'vote' aliased as GQLName: 'Vote'
"""
type Vote {
  created_at: DateTime
  id: ID!
  post: Post @materializer(query: "getPostUsingVote_post_id_fkey")
  post_id: ID
  upvote: Boolean
  user_id: ID
  usertable: Usertable
    @materializer(query: "getUsertableUsingVote_user_id_fkey")
}

"""
The following queries are just a set of examples of how to access your schema.
Feel free to modify them or aggregate more.
"""
type Query {
  " Queries for type 'City' "
  getCity(id: ID!): City
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "city"
      configuration: "postgresql_config"
    )

  getCityByCityName(name: String!): [City]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT * FROM "city" WHERE "name" = $1
      """
      configuration: "postgresql_config"
    )
  getCityList: [City]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "city"
      configuration: "postgresql_config"
    )
  getCityPaginatedList(first: Int, after: Int): [City]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "description", "id", "name" FROM "city" ORDER BY "id" LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )
  getCityUsingHotel_city_id_fkey(city_id: ID!): City
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "description", "id", "name" FROM "city" WHERE "id" = $1
      """
      configuration: "postgresql_config"
    )
  getCityUsingPlaces_city_id_fkey(city_id: ID!): City
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "description", "id", "name" FROM "city" WHERE "id" = $1
      """
      configuration: "postgresql_config"
    )
  " Queries for type 'Comment' "
  getComment(id: ID!): Comment
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "comment"
      configuration: "postgresql_config"
    )
  getCommentList: [Comment]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "comment"
      configuration: "postgresql_config"
    )
  getCommentPaginatedList(first: Int, after: Int): [Comment]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "id", "post_id", "text", "user_id" FROM "comment" ORDER BY "id" LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )
  getCommentUsingComment_post_id_fkey(id: ID!): [Comment]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "id", "post_id", "text", "user_id" FROM "comment" WHERE "post_id" = $1
      """
      configuration: "postgresql_config"
    )
  getCommentUsingComment_user_id_fkey(id: ID!): [Comment]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "id", "post_id", "text", "user_id" FROM "comment" WHERE "user_id" = $1
      """
      configuration: "postgresql_config"
    )
  " Queries for type 'Hotel' "
  getHotel(id: ID!): Hotel
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "hotel"
      configuration: "postgresql_config"
    )
  getHotelList: [Hotel]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "hotel"
      configuration: "postgresql_config"
    )
  getHotelPaginatedList(first: Int, after: Int): [Hotel]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "city_id", "created_at", "description", "id", "name" FROM "hotel" ORDER BY "id" LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )
  getHotelUsingHotel_city_id_fkey(id: ID!): [Hotel]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "city_id", "created_at", "description", "id", "name" FROM "hotel" WHERE "city_id" = $1
      """
      configuration: "postgresql_config"
    )
  " Queries for type 'Places' "
  getPlaces(id: ID!): Places
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "places"
      configuration: "postgresql_config"
    )

  getPlacesByPlaceName(name: String!): [Places]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT * FROM "places" WHERE "name" = $1
      """
      configuration: "postgresql_config"
    )
  getPlacesList: [Places]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "places"
      configuration: "postgresql_config"
    )
  getPlacesPaginatedList(first: Int, after: Int): [Places]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "city_id", "created_at", "description", "id", "name" FROM "places" ORDER BY "id" LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )
  getPlacesUsingPlaces_city_id_fkey(id: ID!): [Places]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "city_id", "created_at", "description", "id", "name" FROM "places" WHERE "city_id" = $1
      """
      configuration: "postgresql_config"
    )
  getPlacesUsingPost_place_id_fkey(place_id: ID!): Places
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "city_id", "created_at", "description", "id", "name" FROM "places" WHERE "id" = $1
      """
      configuration: "postgresql_config"
    )
  " Queries for type 'Post' "
  getPost(id: ID!): Post
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "post"
      configuration: "postgresql_config"
    )
  getPostList: [Post]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "post"
      configuration: "postgresql_config"
    )
  getPostPaginatedList(first: Int, after: Int): [Post]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "description", "end_date", "id", "place_id", "start_date", "title", "user_id" FROM "post" ORDER BY "id" LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )
  getPostUsingComment_post_id_fkey(post_id: ID!): Post
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "description", "end_date", "id", "place_id", "start_date", "title", "user_id" FROM "post" WHERE "id" = $1
      """
      configuration: "postgresql_config"
    )
  getPostUsingPost_place_id_fkey(id: ID!): [Post]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "description", "end_date", "id", "place_id", "start_date", "title", "user_id" FROM "post" WHERE "place_id" = $1
      """
      configuration: "postgresql_config"
    )
  getPostUsingPost_user_id_fkey(id: ID!): [Post]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "description", "end_date", "id", "place_id", "start_date", "title", "user_id" FROM "post" WHERE "user_id" = $1
      """
      configuration: "postgresql_config"
    )
  getPostUsingVote_post_id_fkey(post_id: ID!): Post
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "description", "end_date", "id", "place_id", "start_date", "title", "user_id" FROM "post" WHERE "id" = $1
      """
      configuration: "postgresql_config"
    )
  " Queries for type 'Usertable' "
  getUsertable(id: ID!): Usertable
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "usertable"
      configuration: "postgresql_config"
    )
  getUsertableList: [Usertable]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "usertable"
      configuration: "postgresql_config"
    )
  getUsertablePaginatedList(first: Int, after: Int): [Usertable]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "email", "id", "name", "password" FROM "usertable" ORDER BY "id" LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )
  getUsertableUsingComment_user_id_fkey(user_id: ID!): Usertable
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "email", "id", "name", "password" FROM "usertable" WHERE "id" = $1
      """
      configuration: "postgresql_config"
    )
  getUsertableUsingPost_user_id_fkey(user_id: ID!): Usertable
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "email", "id", "name", "password" FROM "usertable" WHERE "id" = $1
      """
      configuration: "postgresql_config"
    )
  getUsertableUsingVote_user_id_fkey(user_id: ID!): Usertable
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "email", "id", "name", "password" FROM "usertable" WHERE "id" = $1
      """
      configuration: "postgresql_config"
    )
  " Queries for type 'Vote' "
  getVote(id: ID!): Vote
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "vote"
      configuration: "postgresql_config"
    )
  getVoteList: [Vote]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "vote"
      configuration: "postgresql_config"
    )
  getVotePaginatedList(first: Int, after: Int): [Vote]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "id", "post_id", "upvote", "user_id" FROM "vote" ORDER BY "id" LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )
  getVoteUsingVote_post_id_fkey(id: ID!): [Vote]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "id", "post_id", "upvote", "user_id" FROM "vote" WHERE "post_id" = $1
      """
      configuration: "postgresql_config"
    )
  getVoteUsingVote_user_id_fkey(id: ID!): [Vote]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "id", "post_id", "upvote", "user_id" FROM "vote" WHERE "user_id" = $1
      """
      configuration: "postgresql_config"
    )
}

"""
The following mutations are just a set of examples of how to access your schema.
Feel free to modify them or aggregate more.
"""
type Mutation {
  " Mutations for type 'City' "
  deleteCity(id: ID!): City
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "city"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertCity(description: String, name: String, created_at: DateTime): City
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "city"
      dml: INSERT
      configuration: "postgresql_config"
    )
  updateCity(
    id: ID!
    created_at: DateTime
    description: String
    name: String
  ): City
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      UPDATE "city" SET
        "created_at" = COALESCE($2, "created_at"),
        "description" = COALESCE($3, "description"),
        "name" = COALESCE($4, "name")
      WHERE
        "id" = $1
      RETURNING *
      """
      configuration: "postgresql_config"
    )
  " Mutations for type 'Comment' "
  deleteComment(id: ID!): Comment
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "comment"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertComment(
    post_id: ID
    text: String
    user_id: ID
    created_at: DateTime
  ): Comment
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "comment"
      dml: INSERT
      configuration: "postgresql_config"
    )
  updateComment(
    id: ID!
    created_at: DateTime
    post_id: ID
    text: String
    user_id: ID
  ): Comment
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      UPDATE "comment" SET
        "created_at" = COALESCE($2, "created_at"),
        "post_id" = COALESCE($3, "post_id"),
        "text" = COALESCE($4, "text"),
        "user_id" = COALESCE($5, "user_id")
      WHERE
        "id" = $1
      RETURNING *
      """
      configuration: "postgresql_config"
    )
  " Mutations for type 'Hotel' "
  deleteHotel(id: ID!): Hotel
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "hotel"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertHotel(
    name: String
    description: String
    created_at: DateTime
    city_id: ID
  ): Hotel
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "hotel"
      dml: INSERT
      configuration: "postgresql_config"
    )
  updateHotel(
    id: ID!
    city_id: ID
    created_at: DateTime
    description: String
    name: String
  ): Hotel
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      UPDATE "hotel" SET
        "city_id" = COALESCE($2, "city_id"),
        "created_at" = COALESCE($3, "created_at"),
        "description" = COALESCE($4, "description"),
        "name" = COALESCE($5, "name")
      WHERE
        "id" = $1
      RETURNING *
      """
      configuration: "postgresql_config"
    )
  " Mutations for type 'Places' "
  deletePlaces(id: ID!): Places
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "places"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertPlaces(name: String, description: String, city_id: ID): Places
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "places"
      dml: INSERT
      configuration: "postgresql_config"
    )
  updatePlaces(
    id: ID!
    city_id: ID
    created_at: DateTime
    description: String
    name: String
  ): Places
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      UPDATE "places" SET
        "city_id" = COALESCE($2, "city_id"),
        "created_at" = COALESCE($3, "created_at"),
        "description" = COALESCE($4, "description"),
        "name" = COALESCE($5, "name")
      WHERE
        "id" = $1
      RETURNING *
      """
      configuration: "postgresql_config"
    )
  " Mutations for type 'Post' "
  deletePost(id: ID!): Post
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "post"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertPost(
    start_date: Date
    description: String
    user_id: ID
    end_date: Date
    created_at: DateTime
    title: String
    place_id: ID
  ): Post
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "post"
      dml: INSERT
      configuration: "postgresql_config"
    )
  updatePost(
    id: ID!
    created_at: DateTime
    description: String
    end_date: Date
    place_id: ID
    start_date: Date
    title: String
    user_id: ID
  ): Post
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      UPDATE "post" SET
        "created_at" = COALESCE($2, "created_at"),
        "description" = COALESCE($3, "description"),
        "end_date" = COALESCE($4, "end_date"),
        "place_id" = COALESCE($5, "place_id"),
        "start_date" = COALESCE($6, "start_date"),
        "title" = COALESCE($7, "title"),
        "user_id" = COALESCE($8, "user_id")
      WHERE
        "id" = $1
      RETURNING *
      """
      configuration: "postgresql_config"
    )
  " Mutations for type 'Usertable' "
  deleteUsertable(id: ID!): Usertable
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "usertable"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertUsertable(
    name: String
    email: String
    created_at: DateTime
    password: String
  ): Usertable
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "usertable"
      dml: INSERT
      configuration: "postgresql_config"
    )
  updateUsertable(
    id: ID!
    created_at: DateTime
    email: String
    name: String
    password: String
  ): Usertable
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      UPDATE "usertable" SET
        "created_at" = COALESCE($2, "created_at"),
        "email" = COALESCE($3, "email"),
        "name" = COALESCE($4, "name"),
        "password" = COALESCE($5, "password")
      WHERE
        "id" = $1
      RETURNING *
      """
      configuration: "postgresql_config"
    )
  " Mutations for type 'Vote' "
  deleteVote(id: ID!): Vote
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "vote"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertVote(
    post_id: ID
    user_id: ID
    created_at: DateTime
    upvote: Boolean
  ): Vote
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "vote"
      dml: INSERT
      configuration: "postgresql_config"
    )
  updateVote(
    id: ID!
    created_at: DateTime
    post_id: ID
    upvote: Boolean
    user_id: ID
  ): Vote
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      UPDATE "vote" SET
        "created_at" = COALESCE($2, "created_at"),
        "post_id" = COALESCE($3, "post_id"),
        "upvote" = COALESCE($4, "upvote"),
        "user_id" = COALESCE($5, "user_id")
      WHERE
        "id" = $1
      RETURNING *
      """
      configuration: "postgresql_config"
    )
}
